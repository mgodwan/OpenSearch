/*
 * SPDX-License-Identifier: Apache-2.0
 */

apply plugin: 'opensearch.java'

dependencies {
    // TODO : circular dependency
    compileOnly project(':plugins:engine-datafusion')

  implementation "org.apache.logging.log4j:log4j-api:${versions.log4j}"
    implementation "org.apache.logging.log4j:log4j-core:${versions.log4j}"

    testImplementation "junit:junit:${versions.junit}"
}

// Task to build the Rust JNI library
task buildRustLibrary(type: Exec) {
    description = 'Build the Rust JNI library using Cargo'
    group = 'build'

    workingDir file('jni')
   def osName = System.getProperty('os.name').toLowerCase()
    def libPrefix = osName.contains('windows') ? '' : 'lib'
    def libExtension = osName.contains('windows') ? '.dll' : (osName.contains('mac') ? '.dylib' : '.so')

    def buildType = project.hasProperty('rustRelease') ? 'release' : 'debug'
    def targetDir = "target/${buildType}"

    def cargoArgs = ['cargo', 'build']
    if (buildType == 'release') {
        cargoArgs.add('--release')
    }

    if (osName.contains('windows')) {
        commandLine cargoArgs
    } else {
        commandLine cargoArgs
    }
   environment 'CARGO_TARGET_DIR', file('jni/target').absolutePath

    inputs.files fileTree('jni/src')
    inputs.file 'jni/Cargo.toml'
    outputs.files file("jni/${targetDir}/${libPrefix}opensearch_datafusion_csv_jni${libExtension}")
    System.out.println("Building Rust library in ${buildType} mode");
}

task copyNativeLibrary(type: Copy, dependsOn: buildRustLibrary) {
    description = 'Copy the native library to Java resources'
    group = 'build'

    def osName = System.getProperty('os.name').toLowerCase()
    def libPrefix = osName.contains('windows') ? '' : 'lib'
    def libExtension = osName.contains('windows') ? '.dll' : (osName.contains('mac') ? '.dylib' : '.so')
    def buildType = project.hasProperty('rustRelease') ? 'release' : 'debug'

    from file("jni/target/${buildType}/${libPrefix}opensearch_datafusion_csv_jni${libExtension}")
    into file('src/main/resources')

    rename { filename ->
        "libopensearch_datafusion_csv_jni${libExtension}"
    }
}

compileJava.dependsOn copyNativeLibrary

processResources.dependsOn copyNativeLibrary

jar {
    archiveBaseName = 'opensearch-dataformat-csv-codec'
    duplicatesStrategy = DuplicatesStrategy.WARN
    dependsOn copyNativeLibrary
}

clean {
    delete file('jni/target')
    delete file('src/main/resources/libopensearch_datafusion_csv_jni.dylib')
    delete file('src/main/resources/libopensearch_datafusion_csv_jni.so')
    delete file('src/main/resources/opensearch_datafusion_csv_jni.dll')
}

test {
    systemProperty 'java.library.path', file('src/main/resources').absolutePath
}
